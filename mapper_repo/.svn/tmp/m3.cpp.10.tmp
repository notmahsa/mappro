/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

using namespace std;
#include "m3.h"
#include "m2.h"
#include "m1.h"
#include "MapParser.h"
#include <X11/keysym.h>
#include <deque>
#include <math.h>
#include <boost/algorithm/string.hpp>
#include <string>
#include <vector>
#include <utility> 
#include <queue>
#include <map>
#include <algorithm>

#define MAX 99999999
///////////////////////////////////////////////////////////////
///////////                                        ////////////
///////////             Generate best Path         ////////////
///////////                                        ////////////
///////////////////////////////////////////////////////////////
extern mapData mapInfo;
extern std::vector<std::string> directions_to_print;


/*******************************************/
/*      COMPUTE PATH TRAVEL TIME           */
/*******************************************/
double compute_path_travel_time(const std::vector<unsigned>& path, const double turn_penalty) {
    unsigned limit1 = path.size();
    int numberOfPenalty = 0;
    if (limit1 == 0) return 0;
    double out = 0;
    unsigned i = 0;
    
    //iterate through the path
    while (i < limit1) {
        // add the segment travel time
        out += find_street_segment_travel_time(path[i]);
<<<<<<< .mine
        if (i < limit1 - 1 && mapInfo.street_segment_info[path[i]].streetID != mapInfo.street_segment_info[path[i + 1]].streetID) {
=======
        
        //if user has to make a turn, add a turn penalty
        if (i < limit1 - 1 && mapInfo.street_segment_info[path[i]].streetID != mapInfo.street_segment_info[path[i + 1]].streetID)
>>>>>>> .r67
            out += turn_penalty;
            numberOfPenalty++;
        }
        i++;
    }
    
    return out;
}


/*******************************************/
/*          FIND POIs FROM NAME            */
/*******************************************/
std::vector<unsigned> find_pois_from_name(std::string name) {
    std::vector<unsigned> foundPOIs;
    name = boost::to_upper_copy<std::string>(name);

    // using std::find with vector and iterator:
    std::vector<int>::iterator it;

    // check if the current name is the one we're looking for
    for (unsigned i = 0; i < mapInfo.poi_name.size(); i++) {
        std::string currName = mapInfo.poi_name[i];
        std::size_t found = currName.find(name);
        if (found != std::string::npos)
            foundPOIs.push_back(i);
    }
    return foundPOIs;
}

<<<<<<< .mine
std::vector <unsigned> directly_connected_segment(unsigned intersection_id1, unsigned intersection_id2) {
    std::vector<unsigned> out;
    if (intersection_id1 == intersection_id2)
        return out;
=======

/*******************************************/
/*       DIRECTLY CONNECTION SEGMENT       */
/*******************************************/
unsigned directly_connected_segment(unsigned intersection_id1, unsigned intersection_id2) {
>>>>>>> .r67
    // find the segment that connects the two intersections, if not found, return -1
    unsigned limit1 = getIntersectionStreetSegmentCount(intersection_id1);
    unsigned limit2 = getIntersectionStreetSegmentCount(intersection_id2);

    for (unsigned i = 0; i < limit1; i++) {
        for (unsigned j = 0; j < limit2; j++) {
            unsigned ind = getIntersectionStreetSegment(intersection_id1, i);
            if (ind == getIntersectionStreetSegment(intersection_id2, j))
                out.push_back(ind);
        }
    }

    return out;
}

class compare {
public:

    bool operator()(std::pair<int, int> a, std::pair<int, int> b) {
        return a.second > b.second;
    }
};

<<<<<<< .mine
void dijkstra(unsigned s, unsigned d, std::map< int, std::vector< std::vector<int> > > myGraph, int nodes, std::vector<unsigned> &seq, const int turn_penalty) {

    int i, v, *dist, *previous, *pEdge;
    unsigned alt, tempAlt;
    unsigned u, segCurr, bestPEdge, nextSegID;
=======

/*******************************************/
/*               DIJKSTRA                  */
/*******************************************/
void dijkstra(int s, int d, std::map< int, std::vector< std::vector<int> > > myGraph, int nodes, std::vector<std::vector<int> > &seq, const int turn_penalty) {
    int i, v, alt, *dist, *previous, *cost;
    unsigned u;
>>>>>>> .r67
    std::vector<int> myVec;
    std::vector<int>::iterator vec_elem;
    std::vector< std::vector<int> > prev;
    std::vector< std::vector<int> >::iterator elem;
    std::priority_queue< std::pair< int, int >, std::vector<std::pair<int, int> >, compare > priorQ;

    dist = new int[nodes]; //distance
    previous = new int[nodes];
    pEdge = new int[nodes];

    for (i = 0; i < nodes; i++) {
        dist[i] = MAX; //setting all distances to infinity
        previous[i] = -1;
        pEdge[i] = -1;
    }
    //set source distance to 0
    dist[s] = 0;
    priorQ.push(make_pair(s, dist[s]));
    
    // Create set of edges adjacent to target
    vector<unsigned> next_to_target = find_adjacent_intersections(d);
    int next_to_target_n = next_to_target.size();
    
    while (!priorQ.empty()) {

        //pick the top element
        u = priorQ.top().first; //first node (intersection) in the priority queue
        priorQ.pop();

        if (dist[u] == MAX) break;  // Path not found

        //if target found stop searching
        if (u == d) {
            next_to_target_n--;
            if(next_to_target_n == 0) break;
        }

        unsigned prevSegID = pEdge[u];
        if (prevSegID != (unsigned) (-1))
            prevSegID = mapInfo.street_segment_info[prevSegID].streetID;

        //main Dijkstra loop
        for (elem = myGraph[u].begin(); elem != myGraph[u].end(); elem++) {
            myVec = *elem;
            v = myVec[0];
            alt = MAX;
            std::vector<unsigned> nextSegIDs = directly_connected_segment(u, v);
            if (nextSegIDs.size() == 0)
                continue;
            bestPEdge = nextSegIDs[0];
            for (unsigned dex = 0; dex < nextSegIDs.size(); dex++) {
                segCurr = nextSegIDs[dex];
                tempAlt = dist[u] + find_street_segment_travel_time(segCurr);
                if (mapInfo.street_segment_info[segCurr].oneWay) {
                    if (mapInfo.street_segment_info[segCurr].from != u)
                        tempAlt = MAX;
                }

                if (pEdge[u] != -1) {
                    nextSegID = mapInfo.street_segment_info[segCurr].streetID;

                    if (nextSegID != prevSegID)
                        tempAlt += turn_penalty;
                }

                if (tempAlt < alt) {
                    alt = tempAlt;
                    bestPEdge = segCurr;
                }
            }

            if (alt < dist[v]) {
                dist[v] = alt;
                previous[v] = u;
                pEdge[v] = bestPEdge;
                priorQ.push(make_pair(v, dist[v]));
            }
        }
    }

    myVec.clear();
    u = d;

    //generate path sequence

    while (previous[u] != -1) {
        //myVec.push_back(u);
        //myVec.push_back(cost[u]);
        seq.push_back(pEdge[u]);
        u = previous[u];
        //myVec.clear();
    }
    delete [] dist;
    delete [] pEdge;
    delete [] previous;

}


/*******************************************/
/*       FIND PATH INTERSECTIONS           */
/*******************************************/
std::vector<unsigned> find_path_between_intersections(const unsigned intersect_id_start, const unsigned intersect_id_end, const double turn_penalty) {
    std::vector<unsigned> seq;
    
    // find path
    dijkstra(intersect_id_start, intersect_id_end, mapInfo.myAdj, mapInfo.interNum, seq, turn_penalty);

    // if no path found, return
    if (seq.size() == 0) {
        return seq;
    }
<<<<<<< .mine
    reverse(seq.begin(), seq.end());
    //cout << compute_path_travel_time(seq, turn_penalty) << endl;
    return seq;
=======
    bool first = true;

    std::vector< std::vector<int> >::iterator seqCount;
    std::vector< std::vector<int> >::iterator oldSeqCount;
    unsigned segID, intID;
    seqCount = seq.begin();


    while (seqCount != seq.end()) {

        if (!first) {
            segID = directly_connected_segment((*seqCount)[0], (*oldSeqCount)[0]);
            if (segID != -1)
                out.push_back(segID);
        }

        oldSeqCount = seqCount;
        intID = (*seqCount)[0];
        seqCount++;
        if (first) first = false;
    }
    segID = directly_connected_segment(intID, intersect_id_start);
    if (segID != -1)
        out.push_back(segID);

    //put the path in the proper order
    reverse(out.begin(), out.end());
    
    
    //cout<<compute_path_travel_time(out, turn_penalty)<<endl;
    ///le_directions(out);
    return out;
>>>>>>> .r67
}


/*******************************************/
/*       FIND PATH TO POI                  */
/*******************************************/
std::vector<unsigned> find_path_to_point_of_interest(const unsigned intersect_id_start, const std::string point_of_interest_name, const double turn_penalty) {
    // store a vector of all the pois matching the requested name
    std::vector<unsigned> result_n = find_pois_from_name(point_of_interest_name);

    // if none are found, return
    if (result_n.size() == 0) {
        return result_n;
    }

    // calculate the closest point of interest from the found list to the starting point
    unsigned closestPoint = result_n[0];
    double closest = find_distance_between_two_points(mapInfo.intersection_position[intersect_id_start], mapInfo.poi_position[result_n[0]]);
    for (unsigned i = 1; i < result_n.size(); i++) {
        double length = find_distance_between_two_points(mapInfo.intersection_position[intersect_id_start], mapInfo.poi_position[result_n[i]]);
        if (length < closest) {
            closest = length;
            closestPoint = result_n[i];
        }
    }

<<<<<<< .mine
=======

    // set the result to the end id
>>>>>>> .r67
    unsigned intersect_id_end = find_closest_intersection(mapInfo.poi_position[closestPoint]);
    //cout << intersect_id_end << endl;

    std::vector<unsigned> seq;
    std::vector<unsigned> out;

    // calculate the path
    dijkstra(intersect_id_start, intersect_id_end, mapInfo.myAdj, mapInfo.interNum, seq, turn_penalty);

    
    // if no path found, return
    if (seq.size() == 0) {
        return out;

<<<<<<< .mine
=======
    bool first = true;
    
    std::vector< std::vector<int> >::iterator seqCount;
    std::vector< std::vector<int> >::iterator oldSeqCount;
    unsigned segID, intID;
    seqCount = seq.begin();

    while (seqCount != seq.end()) {

        if (!first) {
            segID = directly_connected_segment((*seqCount)[0], (*oldSeqCount)[0]);
            if (segID != -1)
                out.push_back(segID);
        }

        oldSeqCount = seqCount;
        intID = (*seqCount)[0];
        seqCount++;
        if (first) first = false;
>>>>>>> .r67
    }
    reverse(seq.begin(), seq.end());

<<<<<<< .mine
    return seq;
=======
    // put the path in the proper order
    reverse(out.begin(), out.end());
    //le_directions(out);
    return out;
>>>>>>> .r67
}


/*******************************************/
/*            STORE DIRECTIONS            */
/*******************************************/
// store the directions in a vector to print to console, also print to terminal in case there are too many directions
void le_directions(const std::vector<unsigned>& path) {
    // clear old directions
    directions_to_print.clear();
    unsigned limit1 = path.size();
    unsigned old = path[0];
    //cout<<endl<<"Continue straight on "<<getStreetName(mapInfo.street_segment_info[old].streetID)<<endl;
    double metrage = mapInfo.street_segment_length[old];
    std::string newDir;
    
    
    cout << "**********DIRECTIONS**********" << endl << endl;
    newDir = "**********DIRECTIONS**********";
    directions_to_print.push_back(newDir);

    // set starting travel
    cout << endl << "Travel straight on " << getStreetName(mapInfo.street_segment_info[old].streetID) << endl;
    newDir = "Travel straight on " + getStreetName(mapInfo.street_segment_info[old].streetID);
    directions_to_print.push_back(newDir);
<<<<<<< .mine
    cout << "Continue for " << metrage << " meters" << endl;
=======
    
    // count the length traveled on a single road
    int meterage = mapInfo.street_segment_length[old];
>>>>>>> .r67
    unsigned i = 0;
    
    // iterate through the path
    while (i < limit1) {
        
        // if the new segment is part of the same street as the old segment, add the length to the total meterage
        if (mapInfo.street_segment_info[i].streetID == mapInfo.street_segment_info[old].streetID) {
            meterage += mapInfo.street_segment_length[i];
        }

        // if the new and old segments are from different streets
        if (getStreetName(mapInfo.street_segment_info[path[i]].streetID) != getStreetName(mapInfo.street_segment_info[old].streetID)) {
            //print length of previous segment
            cout << "Continue for " << meterage << " meters" << endl;
            newDir = "Continue for " + to_string(meterage) + " meters";
            directions_to_print.push_back(newDir);
            
            //clear meterage
            meterage = 0;
            
            //make t points for the cross product
            t_point begin1 = getXY(getIntersectionPosition(mapInfo.street_segment_info[old].from));
            t_point end1 = getXY(getIntersectionPosition(mapInfo.street_segment_info[old].to));
            t_point begin2 = getXY(getIntersectionPosition(mapInfo.street_segment_info[path[i]].from));
            t_point end2 = getXY(getIntersectionPosition(mapInfo.street_segment_info[path[i]].to));

            old = path[i];

            //use cross product to check if the path goes right or left
            if (positive_cross_product(begin1.x - end1.x, begin1.y - end1.y, begin2.x - end2.x, begin2.y - end2.y)) {//turn left

                cout << "Turn left onto " << getStreetName(mapInfo.street_segment_info[old].streetID) << endl;
                newDir = "Turn left onto " + getStreetName(mapInfo.street_segment_info[old].streetID);
                directions_to_print.push_back(newDir);
            } else {
                cout << "Turn right onto " << getStreetName(mapInfo.street_segment_info[old].streetID) << endl;
                newDir = "Turn right onto " + getStreetName(mapInfo.street_segment_info[old].streetID);
                directions_to_print.push_back(newDir);
            }
            
            //update the meterage
            meterage = mapInfo.street_segment_length[old];

        }
        i++;
    }
    // print out last few directions
    newDir = "Continue for " + to_string(meterage) + " meters";
    directions_to_print.push_back(newDir);
    cout << "You have reached your destination!" << endl;
    newDir = "You have reached your destination!";
    directions_to_print.push_back(newDir);
}


/*******************************************/
/*           CROSS PRODUCT                 */
/*******************************************/
bool positive_cross_product(double x1, double y1, double x2, double y2) {
    double xProd = x1 * y2 - y1 * x2;
    return xProd >= 0;
}

bool zero_cross_product(double x1, double y1, double x2, double y2) {
    int xProd = abs(x1 * y2 - y1 * x2);
    return xProd == 0;
}

